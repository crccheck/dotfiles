#!/usr/bin/env python
"""

makes sure django settings dir is in the path.

also has shortcuts for environment based settings.

"""
import os
import sys


CONFIGURATION_MODULE = "settings"


def in_django_project(some_path):
    joined = os.path.join(some_path, CONFIGURATION_MODULE)
    return os.path.exists(joined + '.py') or os.path.isdir(joined) and \
                os.path.exists(os.path.join(joined, '__init__.py'))


def find_project_dir(path=os.getcwd()):
    path_split = os.path.split(path)
    while path_split[1]:
        if in_django_project(path):
            return path
        path = path_split[0]
        path_split = os.path.split(path)
    # we ran out of parents
    return None


project_dir = find_project_dir(os.getcwd())
if project_dir and project_dir not in sys.path:
    sys.path.insert(0, project_dir)

if __name__ == "__main__":
    from django.core.management import execute_from_command_line

    old_env = os.environ.get('ENVIRONMENT', None)  # remember old env

    # Tweak env variables according to the command
    if 'migrate' in sys.argv or 'schemamigration' in sys.argv:
        os.environ['ENVIRONMENT'] = 'migration'
        print "**** Going into `migration` env ****"
    if 'test' in sys.argv:
        os.environ['ENVIRONMENT'] = 'test'
        os.environ['ROOT_LOGGING_LEVEL'] = 'CRITICAL'
        print "**** Going into `test` env ****"

    balls = None
    if 'balls' in sys.argv:
        balls = True
        sys.argv.remove('balls')
        print "**** USE PRODUCTION DB ****"
        os.environ['USE_PRODUCTION_DB'] = '1'

    execute_from_command_line(sys.argv)

    # os.environ gets reset so cleanup not necessary
