#!/bin/sh

###################################################
### Functions
###################################################

# append_path() and prepend_path() adapted from Fink's init.sh

# add to end of path
append_path()
{
    if eval test -z "\$$1"
    then
        eval "export $1=$2"
    fi

    if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""
    then
        eval "export $1=\$$1:$2"
    fi
}

# add to beginning of path
prepend_path()
{
    if eval test -z "\$$1"
    then
      eval "export $1=$2"
      return
    fi

    if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""
    then
      eval "export $1=$2:\$$1"
    fi
}

prepend_path_if_exists()
{
    if [ -d "$2" ]
    then
        prepend_path $1 $2
    fi
}

###################################################
### PATH-type list variables
###################################################

prepend_path PATH /usr/local/bin
prepend_path PATH $HOME/usr/bin
prepend_path PATH $HOME/bin
for i in $HOME/opt/*/bin
do
    prepend_path_if_exists PATH $i
done
prepend_path_if_exists PATH "$HOME/opt/android-sdk-linux_x86-1.5_r1/tools"

# Note to self: as of Python 2.6, there is now support for local
# site-packages in ~/.local/. See PEP-370.
# Better yet, just use virtualenv.
#append_path PYTHONPATH $HOME/.python

append_path LD_LIBRARY_PATH $HOME/lib:$HOME/usr/lib

###################################################
### Simple variables
###################################################

if [ -z "$HOST" ]
then
    HOST=$(hostname | sed 's/\..*//')
fi

export EDITOR=vim
export VISUAL=vim

export LC_COLLATE="POSIX"

if [ "$TERM" == "xterm" ]
then
    export TERM="xterm-color"
fi

# Change the window title of X terminals
case $TERM in
    xterm*|rxvt|Eterm|eterm)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    screen)
        PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
        ;;
esac

# Python stuff
export PIP_DOWNLOAD_CACHE="$HOME/.pip"

function f {
    if [ -z $1 ]; then
        fab -l
    else
        fab $@
    fi
}


###################################################
### Aliases
###################################################

alias sl='sl -e'
alias vi='vim -g'

alias ack='ack-grep'
#todo alias rm to move shit to /tmp
alias mv='mv -iv'
alias cp='cp -iv'
alias ..='cd ..'

alias grep='grep -I --color=auto'
alias fgrep='fgrep -I --color=auto'
alias egrep='egrep -I --color=auto'
alias rgrep='rgrep -I --color=auto'

alias netstat='netstat -natp'
alias du='du -kh --max-depth=1'
alias df='df -kTh'


my_port=8000
alias dj='python manage.py runserver 0.0.0.0:$my_port'
alias djp='python manage.py runserver_plus 0.0.0.0:$my_port'
#alias djl='python manage.py runserver 0.0.0.0:$my_port --settings=local-settings'
#alias djpl='python manage.py runserver_plus 0.0.0.0:$my_port --settings=local-settings'
alias djs="python manage.py shell"
alias djsp="python manage.py shell_plus"
alias djsql="python manage.py debugsqlshell"

alias attach="$HOME/bin/grabssh ; screen -d -r"
alias fixssh="source $HOME/bin/fixssh"
alias ipchicken="curl -s http://checkip.dyndns.org | sed 's/[a-zA-Z/<> :]//g'"
alias fb="fab -f ~/scripts/fabfile.py"

###################################################
### Platform- or system-specific modifications
###################################################

if [ "$(uname -s)" == "Darwin" ]; then
    # Mac OS X stuff:
    alias ls='ls -AFGq'
    append_path PYTHONPATH ~/Library/Python
    # Fix Backspace/Delete confusion:
    stty erase ^?
    # XTerm's $MANPATH gets messed up, and I can't find where it's happening.
    # Screw it. Just reset the whole thing, cuz the default works.
    unset MANPATH
else
    alias ls='ls -F --color=auto'
fi

###################################################
### virtualenvwrapper
###################################################
export WORKON_HOME=$HOME/env
if [ ! -d $WORKON_HOME ]; then
    mkdir -p $WORKON_HOME
fi
[ -f /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh
export PIP_VIRTUALENV_BASE=$WORKON_HOME


#UNCOLOR="\[\033[00m\]"
#COLOR="\[\033[1;36m\]"

###################################################
### git prompt hack
###################################################
# http://henrik.nyh.se/2008/12/git-dirty-prompt
# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
#   username@Machine ~/dev/dir[master]$   # clean working directory
#   username@Machine ~/dev/dir[master*]$  # dirty working directory

function parse_git_dirty {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (Git branch: \1$(parse_git_dirty))/"
}
VIRTUAL_ENV_DISABLE_PROMPT="True"
function active_virtualenv {
    if [ -n "$VIRTUAL_ENV" ]
    then
        #echo -n " (Virtualenv: $COLOR\$(basename "$VIRTUAL_ENV")$UNCOLOR)"
        echo -n " (Virtualenv: $(basename "$VIRTUAL_ENV"))"
    fi
}

# Stolen from Gentoo:
PS1="\n\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\]\$(active_virtualenv)\$(parse_git_branch)\n\$ "
#LIGHT_GREEN="\[\033[1;32m\]"
#PS1="$LIGHT_GREEN\u@\h\[\033[01;34m\] \w$UNCOLOR$(active_virtualenv)$(parse_git_branch)\n\$ "
# Save custom PS1 to restore later
#export CCG_PS1="$PS1"
export PS1
