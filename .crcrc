#!/bin/sh

###################################################
### Functions
###################################################

# append_path() and prepend_path() adapted from Fink's init.sh

# add to end of path
append_path() {
  if eval test -z "\$$1"; then
    eval "export $1=$2"
  fi

  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""; then
    eval "export $1=\$$1:$2"
  fi
}

# add to beginning of path
prepend_path() {
  if eval test -z "\$$1"; then
    eval "export $1=$2"
    return
  fi

  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""; then
    eval "export $1=$2:\$$1"
  fi
}

prepend_path_if_exists() {
  if [ -d "$2" ]; then
    prepend_path $1 $2
  fi
}
###################################################
### PATH-type list variables
###################################################

prepend_path_if_exists PATH $HOME/usr/bin
prepend_path_if_exists PATH $HOME/bin

###################################################
### Simple variables
###################################################

export EDITOR=vim
export VISUAL=vim
# XXX whatever my default visual editor happens to be, could be atom or subl too
# alias vi=${VISUAL}

# export LC_COLLATE="POSIX"
# export DOCKER_NAMESPACE=crccheck  # my docker username

# if [ "$TERM" == "xterm" ]
# then
#     export TERM="xterm-color"
# fi

# Change the window title of X terminals
# case $TERM in
#     # xterm*|rxvt|Eterm|eterm)
#     #     PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
#     #     ;;
#     screen)
#         PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
#         ;;
# esac

# quick way for me to change my titles
function tit {
  local title=$(basename $PWD)
  echo -e "\033];$title\007"
}

# Open a Wireshark window to a Docker container
# Usage: dshark <container>
# function dshark {
#   docker run --rm --net=container:$1 crccheck/tcpdump -i any tcp --immediate-mode -w - | wireshark -k -i -
# }

[ -f ~/.bash_aliases ] && source ~/.bash_aliases
if [ -n "ZSH_VERSION" ]; then
  alias $=''
fi
# alias lol="lolcommits --enable --delay=1 --fork"
# alias loll="lolcommits --last"
# Inspired by https://theptrk.com/2018/07/11/did-txt-file/
did () {
  mkdir -p ~/Documents/did
  if [ -n "$*" ]; then
    # TODO figure out how to escape $*
    touch ~/Documents/did/"$*"
  fi
  find ~/Documents/did -type f -printf "%TY-%Tm-%Td %TH:%TM\t%P\n" | sort -nr | head -n 10
}

if [ -d ~/.nvm ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
else
  alias nvm='[ -f .nvmrc ] && n $(cat .nvmrc) || echo "MISSING: .nvmrc"'
fi

###################################################
### Platform- or system-specific modifications
###################################################

if [ "$(uname -s)" = "Darwin" ]; then
  # Mac OS X stuff:
  alias date=gdate
  alias du='du -kh'
  alias ls='ls -AFGq'
  prepend_path_if_exists PATH /usr/local/bin
  prepend_path_if_exists PATH /opt/homebrew/bin
  prepend_path_if_exists PATH $(brew --prefix)/opt/curl/bin
  prepend_path_if_exists PATH $(brew --prefix)/opt/findutils/libexec/gnubin
  prepend_path_if_exists PATH $(brew --prefix)/opt/gnu-sed/libexec/gnubin
  prepend_path_if_exists PATH $(brew --prefix)/opt/mysql@5.7/bin
  prepend_path_if_exists PATH $(brew --prefix)/opt/openssl@1.1/bin
  # http://postgresapp.com/documentation/cli-tools.html
  prepend_path_if_exists PATH '/Applications/Postgres.app/Contents/Versions/latest/bin'

  # Fix Backspace/Delete confusion:
  # stty erase ^?
  # XTerm's $MANPATH gets messed up, and I can't find where it's happening.
  # Screw it. Just reset the whole thing, cuz the default works.
  unset MANPATH

  # xcode 4 hack, to get pycrypto to install
  # export ARCHFLAGS='-arch i386 -arch x86_64'

  [ -d /opt/homebrew ] && eval "$(/opt/homebrew/bin/brew shellenv)"
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
  fi
  [ -f $HOME/Sync/dotfiles/git-completion.bash ] && source $HOME/Sync/dotfiles/git-completion.bash

  # Autoenv
  # [ -f ~/Sync/autoenv/activate.sh ] && source ~/Sync/autoenv/activate.sh
else
  # Fix aliases that don't work in OSX
  alias df='df -kTh'
  alias du='du -kh --max-depth=1'
  alias ls='ls -F --color=auto'
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'

  # SSH Agent and keychain
  if [ -f /usr/bin/keychain ] && [ ! -f /tmp/keychain ]; then
    ssh-add ~/.ssh/*.pem
    # /usr/bin/keychain $HOME/.ssh/*.pem
    # source $HOME/.keychain/$HOSTNAME-sh
    touch /tmp/keychain
  fi
fi

# HACK to run stuff only in M1 mac with zsh
if [ -d /opt/homebrew ]; then
  bindkey -e
fi
# After each command, save and reload history
# nevermind, this is too confusing
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
# export HISTCONTROL=ignoredups:erasedups

###################################################
### PYTHON
###################################################
export PIP_DISABLE_PIP_VERSION_CHECK=1
if [ -d ~/.pyenv ]; then
  # Same as $(pyenv init --path)
  prepend_path PATH $HOME/.pyenv/shims
  eval "$(pyenv init -)"
  # eval "$(pyenv virtualenv-init -)"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  export VIRTUAL_ENV_DISABLE_PROMPT=1

  function work {
    if [ -f poetry.lock ]; then
      echo "poetry shell"
      poetry shell
      exit
    fi

    local env_name=$(basename $PWD)
    pyenv activate ${env_name}
    if [ $? -ne 0 ]; then
      echo "Shall I create '${env_name}' for you? [Yn]"
      read -n 1 sure
      if [ -z "$sure" ] || [ "$sure" = 'y' ] || [ "$sure" = 'Y' ]; then
        # echo "Python version? [3.9]"
        # read ver
        pyenv virtualenv ${env_name}
        pyenv activate ${env_name}
        setvirtualenvproject
      fi
    fi
  }
fi

if [ -d ~/.poetry ]; then
  prepend_path PATH $HOME/.poetry/bin
  if [ "$(uname -s)" == "Darwin" ]; then
    if [ ! -f "$(brew --prefix)/etc/bash_completion.d/poetry.bash-completion" ]; then
      poetry completions bash > $(brew --prefix)/etc/bash_completion.d/poetry.bash-completion
    fi
  fi
fi

# Workaround for Conda removing /usr/bin from my path
export CONDA_DEFAULT_ENV=dummy

if [ -n "$BASH_VERSION" ]; then

GREEN="\[\033[1;32m\]"
BLUE="\[\033[1;34m\]"
CYAN="\[\033[1;36m\]"
UNCOLOR="\[\033[00m\]"

eCYAN="\x1b[1;36m"
eUNCOLOR="\x1b[0m"

###################################################
### git prompt hack
###################################################
# http://henrik.nyh.se/2008/12/git-dirty-prompt
# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
#   username@Machine ~/dev/dir[master]$   # clean working directory
#   username@Machine ~/dev/dir[master*]$  # dirty working directory
#
# https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh
function parse_git_dirty {
    # 0    clean
    # 1    dirty
    # 129  not in git
    git diff --no-ext-diff --quiet --exit-code 2> /dev/null
    [[ $? -eq 1 ]] && echo "*"
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (Git branch: \1$(parse_git_dirty))/"
}
function active_virtualenv {
    if [ -n "$VIRTUAL_ENV" ]
    then
        echo -en " (Virtualenv: $eCYAN$(basename "$VIRTUAL_ENV")$eUNCOLOR)"
        # echo -n " (Virtualenv: $(basename "$VIRTUAL_ENV"))"
    fi
}

# https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/
# https://stackoverflow.com/questions/1862510/how-can-the-last-commands-wall-time-be-put-in-the-bash-prompt/1862762#1862762
function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

trap 'timer_start' DEBUG
PROMPT_COMMAND="timer_stop"

# PS1="\n\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\]\$(active_virtualenv)\$(parse_git_branch)\n\$ "
PS1="\n‚è≥ $CYAN\D{%FT%T} ${UNCOLOR}last: \${timer_show}s exit: \$?\n$GREEN\u@\h$BLUE \w$UNCOLOR\$(active_virtualenv)\$(parse_git_branch)\n\$ "
export PS1
fi
# zsh prompt is in .zshrc

# latest can be downloaded: http://standards.ieee.org/develop/regauth/oui/oui.txt
function mac {
    OUI=$HOME/Sync/dotfiles/resources/oui.txt
    if [ -z $1 ]; then
        echo "Missing Parameter XX:XX:XX or xxxxxx"
    else
        grep -i $1 $OUI
    fi
}

# MAC manipulators
# https://gist.github.com/jashkenas/5113149
alias random_mac='sudo ifconfig en0 ether `openssl rand -hex 6 | sed "s/\(..\)/\1:/g; s/.$//"`'
alias restore_mac='sudo ifconfig en0 ether YOUR_ORIGINAL_MAC_ADDRESS_GOES_HERE'

# Ubuntu 18.04 and pipx. This needs to take precedence over pyenv
prepend_path_if_exists PATH $HOME/.local/bin
